// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyApiForSomeThing.Data;

namespace MyApiForSomeThing.Migrations
{
    [DbContext(typeof(MyApiContext))]
    [Migration("20181104085643_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MyApiForSomeThing.Models.Credential", b =>
                {
                    b.Property<string>("Token")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccessToken");

                    b.Property<long>("CreatedTimeMls");

                    b.Property<long>("ExpiredTimeMls");

                    b.Property<string>("KeyReset");

                    b.Property<string>("Password");

                    b.Property<long>("RoleCredentialId");

                    b.Property<int>("Status");

                    b.Property<long>("UserAccountId");

                    b.Property<string>("Username");

                    b.HasKey("Token");

                    b.HasIndex("RoleCredentialId");

                    b.HasIndex("UserAccountId");

                    b.ToTable("Credentials");
                });

            modelBuilder.Entity("MyApiForSomeThing.Models.KindMusic", b =>
                {
                    b.Property<long>("KId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedAt");

                    b.Property<string>("KDescription");

                    b.Property<string>("KName");

                    b.Property<int>("Status");

                    b.Property<long>("UpdatedAt");

                    b.HasKey("KId");

                    b.ToTable("KindMusics");
                });

            modelBuilder.Entity("MyApiForSomeThing.Models.RoleCredential", b =>
                {
                    b.Property<long>("RId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedAt");

                    b.Property<string>("RDescription");

                    b.Property<string>("RName");

                    b.Property<int>("Status");

                    b.Property<long>("UpdatedAt");

                    b.HasKey("RId");

                    b.ToTable("RoleCredentials");
                });

            modelBuilder.Entity("MyApiForSomeThing.Models.RoleUser", b =>
                {
                    b.Property<long>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedAt");

                    b.Property<string>("RoleDescription");

                    b.Property<string>("RoleName");

                    b.Property<int>("Status");

                    b.Property<long>("UpdatedAt");

                    b.HasKey("RoleId");

                    b.ToTable("RoleUsers");
                });

            modelBuilder.Entity("MyApiForSomeThing.Models.Song", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Author");

                    b.Property<long>("CreatedAt");

                    b.Property<string>("Description");

                    b.Property<long>("KindMusicKId");

                    b.Property<string>("LinkMp3");

                    b.Property<string>("Name");

                    b.Property<string>("Singer");

                    b.Property<int>("Status");

                    b.Property<string>("Thumbnail");

                    b.Property<int>("Turns");

                    b.Property<long>("UpdatedAt");

                    b.Property<long>("UserAccountId");

                    b.HasKey("Id");

                    b.HasIndex("KindMusicKId");

                    b.HasIndex("UserAccountId");

                    b.ToTable("Songs");
                });

            modelBuilder.Entity("MyApiForSomeThing.Models.UserAccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedAt");

                    b.Property<string>("Password");

                    b.Property<long>("RoleId");

                    b.Property<string>("Salt");

                    b.Property<int>("Status");

                    b.Property<long>("UpdatedAt");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("UserAccounts");
                });

            modelBuilder.Entity("MyApiForSomeThing.Models.UserInformation", b =>
                {
                    b.Property<string>("Email")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("Avatar");

                    b.Property<long>("CreatedAt");

                    b.Property<bool>("EmailVerify");

                    b.Property<string>("FirstName");

                    b.Property<int>("Gender");

                    b.Property<string>("Introduction");

                    b.Property<string>("LastName");

                    b.Property<string>("Phone");

                    b.Property<int>("Status");

                    b.Property<long>("UpdatedAt");

                    b.Property<long>("UserAccountId");

                    b.HasKey("Email");

                    b.HasIndex("UserAccountId")
                        .IsUnique();

                    b.ToTable("UserInformations");
                });

            modelBuilder.Entity("MyApiForSomeThing.Models.Credential", b =>
                {
                    b.HasOne("MyApiForSomeThing.Models.RoleCredential", "RoleCredential")
                        .WithMany("Credentials")
                        .HasForeignKey("RoleCredentialId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyApiForSomeThing.Models.UserAccount", "UserAccount")
                        .WithMany("Credentials")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyApiForSomeThing.Models.Song", b =>
                {
                    b.HasOne("MyApiForSomeThing.Models.KindMusic")
                        .WithMany("Songs")
                        .HasForeignKey("KindMusicKId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyApiForSomeThing.Models.UserAccount", "UserAccount")
                        .WithMany("Songs")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyApiForSomeThing.Models.UserAccount", b =>
                {
                    b.HasOne("MyApiForSomeThing.Models.RoleUser", "RoleUser")
                        .WithMany("UserAccounts")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyApiForSomeThing.Models.UserInformation", b =>
                {
                    b.HasOne("MyApiForSomeThing.Models.UserAccount", "UserAccount")
                        .WithOne("Information")
                        .HasForeignKey("MyApiForSomeThing.Models.UserInformation", "UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
